version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: travel-management-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-travel_management}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - travel-management-network

  # Backend API
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: travel-management-server
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-travel_management}
      JWT_SECRET: ${JWT_SECRET:-dev_secret_key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - travel-management-network
    command: npm run dev

  # Frontend client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: travel-management-client
    restart: unless-stopped
    depends_on:
      - server
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - travel-management-network
    command: npm start

volumes:
  postgres_data:

networks:
  travel-management-network:
    driver: bridge 